1. Created Amplify and React environment
2. Amplify pull: Downloaded the components for the interface
3. Changed the components, added them to the ...-personalized folder
4. For the Backend: ampliafy add api -> created the api and the lambda function (everything stored in "Amplify" folder)
4.1 When trying to create the python lambda functiony, some errors spotted regarding dependencies -> SOLUTION: create a venv and install the dependencies there
5. Connected the API to the front end, to be able to stablish the connection between front and Backend. The method is a POST
   in order to be able to send large queries without any connection problem. Using CloudWatch logs of execution and control we
   get to check which are the problems that araise during the development from the API utilization
6. Developed Lex Chatbot:
   6.1 Created intents based on services and conversation workflow.
   6.2 Added slots and slot types for storing vital information
   6.3 Added sample utterances for training the bot
   6.4 Created a Lambda function for message validation
7. Connect the API to the Lex bot:
   Python SDK was used
   Whenever the bot gets updated, the version and alias must also update. aliasId must be changed in mcochatbotConvHandler index.py file.
   Moreover in the lex console, the new alias language should be connected to the LexHelperFunction
8. Developed Kendra:
   8.1 Created the index and provided the data source: MACO workshop
   8.2 Created a thesaurus file for synonyms (improve query performance)